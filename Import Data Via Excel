   action("&Import")
            {
                Caption = '&Import';
                Image = ImportExcel;
                ApplicationArea = All;
                ToolTip = 'Import data from excel.';
                trigger OnAction()
                begin
                    ReadExcelSheet();
                    ImportExcelData();
                End;
            }


  local procedure ReadExcelSheet()
    var
        FileMgt: Codeunit "File Management";
        IStream: InStream;
        FromFile: Text[100];
    begin
        UploadIntoStream(UploadExcelMsg, '', '', FromFile, IStream);
        if FromFile <> '' then begin
            FileName := FileMgt.GetFileName(FromFile);
            SheetName := TempExcelBuffer.SelectSheetsNameStream(IStream);
        end else
            Error(NoFileFoundMsg);
        TempExcelBuffer.Reset();
        TempExcelBuffer.DeleteAll();
        TempExcelBuffer.OpenBookStream(IStream, SheetName);
        TempExcelBuffer.ReadSheet();
    end;

    local procedure ImportExcelData()
    var
        JudianRec: Record Judians;
        RowNo: Integer;
        ColNo: Integer;
        LineNo: Integer;
        MaxRowNo: Integer;
        PostedBeneficiaryAid: Record "Posted Ben. Aid Dispersed";
        AmountLVar: Decimal;
        CummulativeAmount: Decimal;
    begin
        RowNo := 0;
        ColNo := 0;
        MaxRowNo := 0;

        TempExcelBuffer.Reset();
        if TempExcelBuffer.FindLast() then begin
            MaxRowNo := TempExcelBuffer."Row No.";
        end;

        for RowNo := 2 to MaxRowNo do begin
            UIDG := GetValueAtCell(RowNo, 1);
            JudianName := GetValueAtCell(RowNo, 2);
            Amount := GetValueAtCell(RowNo, 3);
            JudianRec.Reset();
            JudianRec.SetRange(UID, UIDG);
            if JudianRec.FindFirst() then begin
                Evaluate(CummulativeAmount, Amount);
                PostedBeneficiaryAid.Reset();
                PostedBeneficiaryAid.SetRange(UID, UIDG);
                if Not PostedBeneficiaryAid.FindFirst() then
                    Exit
                Else
                    if PostedBeneficiaryAid.FindFirst() then
                        repeat
                            AmountLVar += PostedBeneficiaryAid.Amount;
                        until PostedBeneficiaryAid.Next() = 0;
                JudianRec."Cummulative Amount" := CummulativeAmount + AmountLVar;
                JudianRec.Modify();
            end;
        end;
    end;

    local procedure GetValueAtCell(RowNo: Integer; ColNo: Integer): Text
    begin
        TempExcelBuffer.Reset();
        If TempExcelBuffer.Get(RowNo, ColNo) then
            exit(TempExcelBuffer."Cell Value as Text")
        else
            exit('');
    end;
